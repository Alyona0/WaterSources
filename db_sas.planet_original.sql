--
-- Файл сгенерирован с помощью SQLiteStudio v3.2.1 в Сб янв 14 18:23:56 2023
--
-- Использованная кодировка текста: UTF-8
--
PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

-- Таблица: Category
DROP TABLE IF EXISTS Category;

CREATE TABLE Category (
    ID    INTEGER PRIMARY KEY AUTOINCREMENT,
    cName TEXT    COLLATE SYSTEMNOCASE
);


-- Таблица: CategoryView
DROP TABLE IF EXISTS CategoryView;

CREATE TABLE CategoryView (
    ID         INTEGER PRIMARY KEY AUTOINCREMENT,
    cvUser     INTEGER,
    cvCategory INTEGER,
    cvVisible  INTEGER,
    cvMinZoom  INTEGER,
    cvMaxZoom  INTEGER
);


-- Таблица: Mark
DROP TABLE IF EXISTS Mark;

CREATE TABLE Mark (
    ID          INTEGER PRIMARY KEY AUTOINCREMENT,
    mCategory   INTEGER,
    mImage      INTEGER,
    mAppearance INTEGER,
    mName       TEXT    COLLATE SYSTEMNOCASE,
    mDesc       TEXT    COLLATE SYSTEMNOCASE,
    mGeoType    INTEGER,
    mGeoCount   INTEGER,
    mGeoLonSize INTEGER,
    mGeoLatSize INTEGER,
    mGeoWKB     BLOB
);


-- Таблица: MarkAppearance
DROP TABLE IF EXISTS MarkAppearance;

CREATE TABLE MarkAppearance (
    ID       INTEGER PRIMARY KEY AUTOINCREMENT,
    maColor1 INTEGER,
    maColor2 INTEGER,
    maScale1 INTEGER,
    maScale2 INTEGER
);


-- Таблица: MarkFTS
DROP TABLE IF EXISTS MarkFTS;

CREATE VIRTUAL TABLE MarkFTS USING fts4 (
    mName,
    mDesc,
    tokenize = simple
);


-- Таблица: MarkFTS_content
DROP TABLE IF EXISTS MarkFTS_content;

CREATE TABLE MarkFTS_content (
    docid   INTEGER PRIMARY KEY,
    c0mName,
    c1mDesc
);


-- Таблица: MarkFTS_docsize
DROP TABLE IF EXISTS MarkFTS_docsize;

CREATE TABLE MarkFTS_docsize (
    docid INTEGER PRIMARY KEY,
    size  BLOB
);


-- Таблица: MarkFTS_segdir
DROP TABLE IF EXISTS MarkFTS_segdir;

CREATE TABLE MarkFTS_segdir (
    level            INTEGER,
    idx              INTEGER,
    start_block      INTEGER,
    leaves_end_block INTEGER,
    end_block        INTEGER,
    root             BLOB,
    PRIMARY KEY (
        level,
        idx
    )
);


-- Таблица: MarkFTS_segments
DROP TABLE IF EXISTS MarkFTS_segments;

CREATE TABLE MarkFTS_segments (
    blockid INTEGER PRIMARY KEY,
    block   BLOB
);


-- Таблица: MarkFTS_stat
DROP TABLE IF EXISTS MarkFTS_stat;

CREATE TABLE MarkFTS_stat (
    id    INTEGER PRIMARY KEY,
    value BLOB
);


-- Таблица: MarkImage
DROP TABLE IF EXISTS MarkImage;

CREATE TABLE MarkImage (
    ID     INTEGER PRIMARY KEY AUTOINCREMENT,
    miName TEXT    COLLATE SYSTEMNOCASE
);


-- Таблица: MarkMeta
DROP TABLE IF EXISTS MarkMeta;

CREATE TABLE MarkMeta (
    ID    INTEGER PRIMARY KEY AUTOINCREMENT,
    mMark INTEGER UNIQUE,
    mMeta BLOB
);


-- Таблица: MarkRTree
DROP TABLE IF EXISTS MarkRTree;

CREATE VIRTUAL TABLE MarkRTree USING rtree (
    RowID,
    mLeft,
    mRight,
    mBottom,
    mTop
);


-- Таблица: MarkRTree_node
DROP TABLE IF EXISTS MarkRTree_node;

CREATE TABLE MarkRTree_node (
    nodeno INTEGER PRIMARY KEY,
    data
);

INSERT INTO MarkRTree_node (
                               nodeno,
                               data
                           )
                           VALUES (
                               1,

                           );


-- Таблица: MarkRTree_parent
DROP TABLE IF EXISTS MarkRTree_parent;

CREATE TABLE MarkRTree_parent (
    nodeno     INTEGER PRIMARY KEY,
    parentnode
);


-- Таблица: MarkRTree_rowid
DROP TABLE IF EXISTS MarkRTree_rowid;

CREATE TABLE MarkRTree_rowid (
    rowid  INTEGER PRIMARY KEY,
    nodeno
);


-- Таблица: MarkView
DROP TABLE IF EXISTS MarkView;

CREATE TABLE MarkView (
    ID         INTEGER PRIMARY KEY AUTOINCREMENT,
    mvUser     INTEGER,
    mvMark     INTEGER,
    mvCategory INTEGER,
    mvVisible  INTEGER
);


-- Таблица: User
DROP TABLE IF EXISTS User;

CREATE TABLE User (
    ID    INTEGER PRIMARY KEY AUTOINCREMENT,
    uName TEXT    COLLATE SYSTEMNOCASE
);

INSERT INTO User (
                     ID,
                     uName
                 )
                 VALUES (
                     1,
                     'sasgis'
                 );


-- Индекс: IndexMarkMetamMark
DROP INDEX IF EXISTS IndexMarkMetamMark;

CREATE INDEX IndexMarkMetamMark ON MarkMeta (
    mMark
);


COMMIT TRANSACTION;
PRAGMA foreign_keys = on;
